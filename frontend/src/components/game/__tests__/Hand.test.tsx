import React from 'react';
import { render, screen, fireEvent } from '@/test-utils';
import { Hand } from '../Hand';
import type { CardInfo } from '@/types';

// Next.js Image„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆ„É¢„ÉÉ„ÇØ
jest.mock('next/image', () => {
  return function MockedImage(props: Record<string, unknown>) {
    // eslint-disable-next-line @next/next/no-img-element, jsx-a11y/alt-text
    return <img {...props} />;
  };
});

describe('Hand', () => {
  const mockCards: CardInfo[] = [
    {
      id: 1,
      suit: 'HEARTS',
      rank: 'ACE',
      code: 'AH',
      pointValue: 1,
      sortOrder: 1
    },
    {
      id: 14,
      suit: 'CLUBS',
      rank: 'TWO',
      code: '2C',
      pointValue: 0,
      sortOrder: 14
    },
    {
      id: 39,
      suit: 'SPADES',
      rank: 'QUEEN',
      code: 'QS',
      pointValue: 13,
      sortOrder: 39
    }
  ];

  const mockOnCardSelect = jest.fn();
  const mockOnCardPlay = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('ÊâãÊú≠„ÅÆ„Ç´„Éº„Éâ„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
    render(<Hand cards={mockCards} />);
    
    // ÁîªÂÉèË°®Á§∫„ÅÆÂ†¥Âêà„ÅØalt„ÉÜ„Ç≠„Çπ„Éà„ÅßÁ¢∫Ë™ç
    expect(screen.getByAltText('HEARTS ACE')).toBeInTheDocument();
    expect(screen.getByAltText('CLUBS TWO')).toBeInTheDocument();
    expect(screen.getByAltText('SPADES QUEEN')).toBeInTheDocument();
  });

  it('„Ç´„Éº„ÉâÈÅ∏Êäû„Éè„É≥„Éâ„É©„ÅåÂãï‰Ωú„Åô„Çã', () => {
    render(
      <Hand 
        cards={mockCards} 
        onCardSelect={mockOnCardSelect}
        mode="exchange"
      />
    );
    
    const firstCard = screen.getAllByRole('button')[0];
    fireEvent.click(firstCard);
    
    // „ÇΩ„Éº„ÉàÂæå„ÅÆÊúÄÂàù„ÅÆ„Ç´„Éº„ÉâÔºà„ÇØ„É©„Éñ„ÅÆ2Ôºâ„ÅßÊ§úË®º
    const sortedCards = [...mockCards].sort((a, b) => {
      const suitOrder = { 'CLUBS': 1, 'DIAMONDS': 2, 'SPADES': 3, 'HEARTS': 4 };
      const rankOrder = {
        'TWO': 2, 'THREE': 3, 'FOUR': 4, 'FIVE': 5, 'SIX': 6, 'SEVEN': 7, 'EIGHT': 8,
        'NINE': 9, 'TEN': 10, 'JACK': 11, 'QUEEN': 12, 'KING': 13, 'ACE': 14
      };
      if (a.suit !== b.suit) {
        return suitOrder[a.suit] - suitOrder[b.suit];
      }
      return rankOrder[a.rank] - rankOrder[b.rank];
    });
    expect(mockOnCardSelect).toHaveBeenCalledWith(sortedCards[0]);
  });

  it('„Ç´„Éº„Éâ„Éó„É¨„Ç§„Éè„É≥„Éâ„É©„ÅåÂãï‰Ωú„Åô„Çã', () => {
    render(
      <Hand 
        cards={mockCards} 
        onCardPlay={mockOnCardPlay}
        mode="play"
        playableCardIds={[39]} // „Çπ„Éö„Éº„Éâ„ÅÆQ„Åå„Éó„É¨„Ç§ÂèØËÉΩ
      />
    );
    
    const playableCard = screen.getAllByRole('button')[1]; // „ÇΩ„Éº„ÉàÂæå„ÅÆ2Áï™ÁõÆ„ÅÆ„Ç´„Éº„ÉâÔºà„Çπ„Éö„Éº„Éâ„ÅÆQ„ÄÅ„Éó„É¨„Ç§ÂèØËÉΩÔºâ
    fireEvent.click(playableCard);
    
    // „Éó„É¨„Ç§ÂèØËÉΩ„Å™„Ç´„Éº„ÉâÔºà„Çπ„Éö„Éº„Éâ„ÅÆQÔºâ„ÅßÊ§úË®º
    const sortedCards = [...mockCards].sort((a, b) => {
      const suitOrder = { 'CLUBS': 1, 'DIAMONDS': 2, 'SPADES': 3, 'HEARTS': 4 };
      const rankOrder = {
        'TWO': 2, 'THREE': 3, 'FOUR': 4, 'FIVE': 5, 'SIX': 6, 'SEVEN': 7, 'EIGHT': 8,
        'NINE': 9, 'TEN': 10, 'JACK': 11, 'QUEEN': 12, 'KING': 13, 'ACE': 14
      };
      if (a.suit !== b.suit) {
        return suitOrder[a.suit] - suitOrder[b.suit];
      }
      return rankOrder[a.rank] - rankOrder[b.rank];
    });
    expect(mockOnCardPlay).toHaveBeenCalledWith(sortedCards[1]); // „Çπ„Éö„Éº„Éâ„ÅÆQ
  });

  it('ÈÅ∏Êäû„Åï„Çå„Åü„Ç´„Éº„Éâ„Å´„Éè„Ç§„É©„Ç§„Éà„ÅåÈÅ©Áî®„Åï„Çå„Çã', () => {
    render(
      <Hand 
        cards={mockCards} 
        selectedCardIds={[39]} // „Çπ„Éö„Éº„Éâ„ÅÆQ„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Çã
      />
    );
    
    const cardElements = screen.getAllByTestId('card');
    expect(cardElements[1]).toHaveClass('ring-blue-500'); // „ÇΩ„Éº„ÉàÂæå„ÅÆ2Áï™ÁõÆ„ÅÆ„Ç´„Éº„ÉâÔºà„Çπ„Éö„Éº„Éâ„ÅÆQÔºâ
  });

  it('„Éó„É¨„Ç§‰∏çÂèØËÉΩ„Å™„Ç´„Éº„Éâ„ÅåÁÑ°ÂäπÂåñ„Åï„Çå„Çã', () => {
    render(
      <Hand 
        cards={mockCards} 
        mode="play"
        playableCardIds={[39]} // „Çπ„Éö„Éº„Éâ„ÅÆQ„ÅÆ„Åø„Éó„É¨„Ç§ÂèØËÉΩ
      />
    );
    
    const cardElements = screen.getAllByTestId('card');
    expect(cardElements[0]).toHaveClass('opacity-50'); // „ÇØ„É©„Éñ„ÅÆ2Ôºà„Éó„É¨„Ç§‰∏çÂèØÔºâ
    expect(cardElements[2]).toHaveClass('opacity-50'); // „Éè„Éº„Éà„ÅÆAÔºà„Éó„É¨„Ç§‰∏çÂèØÔºâ
  });

  it('‰∫§Êèõ„É¢„Éº„Éâ„ÅßÊúÄÂ§ßÈÅ∏ÊäûÊï∞„ÇíË∂Ö„Åà„Çã„Å®„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
    render(
      <Hand 
        cards={mockCards} 
        mode="exchange"
        selectedCardIds={[1, 14, 39]}
        maxSelectableCards={3}
      />
    );
    
    expect(screen.getByText(/3Êûö„ÅÆ„Ç´„Éº„Éâ„ÇíÈÅ∏Êäû„Åó„Åæ„Åó„Åü/)).toBeInTheDocument();
  });

  it('Á¢∫Ë™ç„Éú„Çø„É≥„ÅåÊ≠£„Åó„ÅÑÊù°‰ª∂„ÅßÊúâÂäπÂåñ„Åï„Çå„Çã', () => {
    const mockOnConfirm = jest.fn();
    render(
      <Hand 
        cards={mockCards} 
        mode="exchange"
        selectedCardIds={[1, 14, 39]}
        maxSelectableCards={3}
        showConfirmButton={true}
        onConfirm={mockOnConfirm}
      />
    );
    
    const confirmButton = screen.getByText('üîÑ ‰∫§ÊèõÁ¢∫ÂÆö');
    expect(confirmButton).not.toBeDisabled();
  });

  it('„Ç´„Éº„Éâ„ÅåÊ≠£„Åó„Åè„ÇΩ„Éº„Éà„Åï„Çå„Å¶Ë°®Á§∫„Åï„Çå„Çã', () => {
    const unsortedCards = [...mockCards].reverse();
    render(<Hand cards={unsortedCards} />);
    
    // ÁîªÂÉèË°®Á§∫„ÅÆÂ†¥Âêà„ÄÅalt„ÉÜ„Ç≠„Çπ„Éà„ÅßÈ†ÜÂ∫è„ÇíÁ¢∫Ë™ç
    const images = screen.getAllByRole('img');
    const altTexts = images.map(img => img.getAttribute('alt'));
    
    // Êñ∞„Åó„ÅÑ„ÇΩ„Éº„ÉàÈ†Ü: „ÇØ„É©„Éñ > „Çπ„Éö„Éº„Éâ > „Éè„Éº„Éà = CLUBS TWO, SPADES QUEEN, HEARTS ACE
    expect(altTexts).toEqual(['CLUBS TWO', 'SPADES QUEEN', 'HEARTS ACE']);
  });

  it('Á©∫„ÅÆÊâãÊú≠„Åß„ÇÇ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Å™„ÅÑ', () => {
    render(<Hand cards={[]} />);
    
    expect(screen.getByText('ÊâãÊú≠„Åå„ÅÇ„Çä„Åæ„Åõ„Çì')).toBeInTheDocument();
  });

  it('„É¨„Çπ„Éù„É≥„Ç∑„Éñ„Éá„Ç∂„Ç§„É≥„ÅåÈÅ©Áî®„Åï„Çå„Çã', () => {
    render(<Hand cards={mockCards} />);
    
    const handContainer = screen.getByTestId('hand-container');
    expect(handContainer).toHaveClass('flex-wrap', 'justify-center');
  });

  it('ÊâãÁï™„Åß„Å™„ÅÑÊôÇ„Å´„Ç´„Éº„Éâ„Åå„Ç∞„É¨„Éº„Ç¢„Ç¶„Éà„Åï„Çå„Çã', () => {
    render(
      <Hand 
        cards={mockCards} 
        mode="play"
        isPlayerTurn={false}
      />
    );
    
    const handContainer = screen.getByTestId('hand-container');
    expect(handContainer).toHaveClass('bg-gray-100', 'opacity-60');
  });

  it('ÊâãÁï™„Åß„Å™„ÅÑÊôÇ„Å´„Ç´„Éº„Éâ„ÇØ„É™„ÉÉ„ÇØ„ÅåÁÑ°ÂäπÂåñ„Åï„Çå„Çã', () => {
    render(
      <Hand 
        cards={mockCards} 
        mode="play"
        isPlayerTurn={false}
        onCardPlay={mockOnCardPlay}
      />
    );
    
    const firstCard = screen.getAllByRole('button')[0];
    fireEvent.click(firstCard);
    
    expect(mockOnCardPlay).not.toHaveBeenCalled();
  });

  it('ÊâãÁï™„Åß„Å™„ÅÑÊôÇ„Å´ÈÅ©Âàá„Å™„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
    render(
      <Hand 
        cards={mockCards} 
        mode="play"
        isPlayerTurn={false}
      />
    );
    
    expect(screen.getByText(/‰ªñ„ÅÆ„Éó„É¨„Ç§„É§„Éº„ÅÆÊâãÁï™„Åß„Åô„ÄÇ„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ/)).toBeInTheDocument();
  });

  it('ÊâãÁï™„ÅÆÊôÇ„ÅØÊ≠£Â∏∏„Å´„Ç´„Éº„Éâ„Éó„É¨„Ç§„Åß„Åç„Çã', () => {
    render(
      <Hand 
        cards={mockCards} 
        mode="play"
        isPlayerTurn={true}
        onCardPlay={mockOnCardPlay}
        playableCardIds={[39]}
      />
    );
    
    const playableCard = screen.getAllByRole('button')[1]; // „ÇΩ„Éº„ÉàÂæå„ÅÆ2Áï™ÁõÆ„ÅÆ„Ç´„Éº„ÉâÔºà„Çπ„Éö„Éº„Éâ„ÅÆQ„ÄÅ„Éó„É¨„Ç§ÂèØËÉΩÔºâ
    fireEvent.click(playableCard);
    
    const sortedCards = [...mockCards].sort((a, b) => {
      const suitOrder = { 'CLUBS': 1, 'DIAMONDS': 2, 'SPADES': 3, 'HEARTS': 4 };
      const rankOrder = {
        'TWO': 2, 'THREE': 3, 'FOUR': 4, 'FIVE': 5, 'SIX': 6, 'SEVEN': 7, 'EIGHT': 8,
        'NINE': 9, 'TEN': 10, 'JACK': 11, 'QUEEN': 12, 'KING': 13, 'ACE': 14
      };
      if (a.suit !== b.suit) {
        return suitOrder[a.suit] - suitOrder[b.suit];
      }
      return rankOrder[a.rank] - rankOrder[b.rank];
    });
    expect(mockOnCardPlay).toHaveBeenCalledWith(sortedCards[1]); // „Çπ„Éö„Éº„Éâ„ÅÆQ
  });
});